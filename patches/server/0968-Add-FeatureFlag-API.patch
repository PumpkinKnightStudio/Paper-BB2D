From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Jake Potrebic <jake.m.potrebic@gmail.com>
Date: Thu, 9 Mar 2023 11:23:58 -0800
Subject: [PATCH] Add FeatureFlag API


diff --git a/src/main/java/io/papermc/paper/world/flag/PaperFeatureFlagProviderImpl.java b/src/main/java/io/papermc/paper/world/flag/PaperFeatureFlagProviderImpl.java
new file mode 100644
index 0000000000000000000000000000000000000000..750126276c8c434ba91f454947760d7466359e06
--- /dev/null
+++ b/src/main/java/io/papermc/paper/world/flag/PaperFeatureFlagProviderImpl.java
@@ -0,0 +1,55 @@
+package io.papermc.paper.world.flag;
+
+import com.google.common.collect.BiMap;
+import com.google.common.collect.HashBiMap;
+import java.util.Map;
+import java.util.Set;
+import java.util.stream.Collectors;
+import net.minecraft.server.MinecraftServer;
+import net.minecraft.world.flag.FeatureElement;
+import net.minecraft.world.flag.FeatureFlagSet;
+import org.bukkit.Material;
+import org.bukkit.craftbukkit.util.CraftMagicNumbers;
+import org.bukkit.entity.EntityType;
+
+public enum PaperFeatureFlagProviderImpl implements FeatureFlags.FeatureFlagProvider {
+    INSTANCE;
+
+    PaperFeatureFlagProviderImpl() {
+        FeatureFlags.INSTANCE = this;
+    }
+
+    static final BiMap<FeatureFlag, net.minecraft.world.flag.FeatureFlag> FLAGS = HashBiMap.create(Map.of(
+        FeatureFlags.VANILLA, net.minecraft.world.flag.FeatureFlags.VANILLA,
+        FeatureFlags.BUNDLE, net.minecraft.world.flag.FeatureFlags.BUNDLE,
+        FeatureFlags.UPDATE_1_20, net.minecraft.world.flag.FeatureFlags.UPDATE_1_20
+    ));
+
+    @Override
+    public boolean isEnabled(final FeatureDependant dependant) {
+        final FeatureFlagSet set = MinecraftServer.getServer().getWorldData().enabledFeatures();
+        return getFeatureElement(dependant).isEnabled(set);
+    }
+
+    @Override
+    public Set<FeatureFlag> requiredFeatures(final FeatureDependant dependant) {
+        final FeatureFlagSet requiredFeatures = getFeatureElement(dependant).requiredFeatures();
+        return FLAGS.entrySet().stream().filter(entry -> requiredFeatures.contains(entry.getValue())).map(Map.Entry::getKey).collect(Collectors.toUnmodifiableSet());
+    }
+
+    static FeatureElement getFeatureElement(final FeatureDependant dependant) {
+        if (dependant instanceof Material material) {
+            if (material.isItem()) {
+                return CraftMagicNumbers.getItem(material);
+            } else if (material.isBlock()) {
+                return CraftMagicNumbers.getBlock(material);
+            } else {
+                throw new IllegalArgumentException(material + " must be a block or item");
+            }
+        } else if (dependant instanceof EntityType entityType) {
+            return CraftMagicNumbers.getEntityTypes(entityType);
+        } else {
+            throw new IllegalArgumentException(dependant + " is not a valid feature dependant");
+        }
+    }
+}
diff --git a/src/main/java/net/minecraft/server/Main.java b/src/main/java/net/minecraft/server/Main.java
index 781b72fd88149642c9fceaecfbfe7546273fb749..25726d007d8f0875bf86faa835717017edda0415 100644
--- a/src/main/java/net/minecraft/server/Main.java
+++ b/src/main/java/net/minecraft/server/Main.java
@@ -111,6 +111,7 @@ public class Main {
                 JvmProfiler.INSTANCE.start(Environment.SERVER);
             }
 
+            io.papermc.paper.world.flag.PaperFeatureFlagProviderImpl.INSTANCE.getClass(); // Paper - init FeatureFlagProvider
             io.papermc.paper.plugin.PluginInitializerManager.load(optionset); // Paper
             Bootstrap.bootStrap();
             Bootstrap.validate();
diff --git a/src/main/resources/META-INF/services/io.papermc.paper.world.flag.FeatureFlags$FeatureFlagProvider b/src/main/resources/META-INF/services/io.papermc.paper.world.flag.FeatureFlags$FeatureFlagProvider
new file mode 100644
index 0000000000000000000000000000000000000000..c3e6b96013f6dd0b784bd867196552d97f3d8685
--- /dev/null
+++ b/src/main/resources/META-INF/services/io.papermc.paper.world.flag.FeatureFlags$FeatureFlagProvider
@@ -0,0 +1 @@
+io.papermc.paper.world.flag.PaperFeatureFlagProviderImpl
diff --git a/src/test/java/io/papermc/paper/world/flag/FeatureFlagTest.java b/src/test/java/io/papermc/paper/world/flag/FeatureFlagTest.java
new file mode 100644
index 0000000000000000000000000000000000000000..eac049a42ac78da562f907664d6d0ca564fd73f2
--- /dev/null
+++ b/src/test/java/io/papermc/paper/world/flag/FeatureFlagTest.java
@@ -0,0 +1,46 @@
+package io.papermc.paper.world.flag;
+
+import io.papermc.paper.adventure.PaperAdventure;
+import java.util.HashSet;
+import java.util.Set;
+import net.kyori.adventure.key.Key;
+import net.minecraft.resources.ResourceLocation;
+import net.minecraft.world.flag.FeatureFlagSet;
+import org.junit.Test;
+
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertNotNull;
+import static org.junit.Assert.fail;
+
+public class FeatureFlagTest {
+
+    @Test
+    public void testFeatureFlagParity() {
+        final Set<ResourceLocation> locations = new HashSet<>();
+        for (final Key key : FeatureFlags.ALL_FLAGS.keySet()) {
+            locations.add(PaperAdventure.asVanilla(key));
+        }
+        net.minecraft.world.flag.FeatureFlags.REGISTRY.fromNames(locations, unknown -> {
+            fail("Unknown key: " + unknown);
+        });
+
+        for (final ResourceLocation nmsFlag : allNames()) {
+            assertNotNull("can't find api flag for " + nmsFlag, FeatureFlags.ALL_FLAGS.get(Key.key(nmsFlag.toString())));
+        }
+    }
+
+    @Test
+    public void testFeatureFlagConversion() {
+        assertEquals(allNames().size(), PaperFeatureFlagProviderImpl.FLAGS.size());
+        for (final FeatureFlag featureFlag : PaperFeatureFlagProviderImpl.FLAGS.keySet()) {
+            final net.minecraft.world.flag.FeatureFlag nmsFlag = PaperFeatureFlagProviderImpl.FLAGS.get(featureFlag);
+            final ResourceLocation nmsFlagName = net.minecraft.world.flag.FeatureFlags.REGISTRY.toNames(FeatureFlagSet.of(nmsFlag)).iterator().next();
+            assertEquals(Key.MINECRAFT_NAMESPACE, nmsFlagName.getNamespace());
+            assertEquals(featureFlag.getName(), nmsFlagName.getPath());
+        }
+    }
+
+    static Set<ResourceLocation> allNames() {
+        return net.minecraft.world.flag.FeatureFlags.REGISTRY.toNames(net.minecraft.world.flag.FeatureFlags.REGISTRY.allFlags());
+    }
+}
