From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Owen1212055 <23108066+Owen1212055@users.noreply.github.com>
Date: Wed, 6 Oct 2021 20:10:36 -0400
Subject: [PATCH] Collision API

Co-authored-by: Tamion <70228790+notTamion@users.noreply.github.com>

diff --git a/src/main/java/io/papermc/paper/event/entity/EntityCollideWithEntityEvent.java b/src/main/java/io/papermc/paper/event/entity/EntityCollideWithEntityEvent.java
new file mode 100644
index 0000000000000000000000000000000000000000..0505e5479526bcfb757e6078d6bbec423498c303
--- /dev/null
+++ b/src/main/java/io/papermc/paper/event/entity/EntityCollideWithEntityEvent.java
@@ -0,0 +1,54 @@
+package io.papermc.paper.event.entity;
+
+import org.bukkit.entity.Entity;
+import org.bukkit.event.Cancellable;
+import org.bukkit.event.Event;
+import org.bukkit.event.HandlerList;
+import org.jetbrains.annotations.ApiStatus;
+import org.jetbrains.annotations.NotNull;
+import java.util.Set;
+
+/**
+ * Fired when two entities collide with each other.
+ * If cancelled, the entities won't get pushed away from each other.
+ */
+public class EntityCollideWithEntityEvent extends Event implements Cancellable {
+
+    private static final HandlerList HANDLER_LIST = new HandlerList();
+    private boolean cancelled;
+    private final Set<Entity> entities;
+
+    @ApiStatus.Internal
+    public EntityCollideWithEntityEvent(@NotNull Entity entity1, @NotNull Entity entity2) {
+        entities = Set.of(entity1, entity2);
+    }
+
+    /**
+     * Returns the Entities involved in this event
+     *
+     * @return Entities that are involved in this event
+     */
+    public @NotNull Set<Entity> getEntities() {
+        return entities;
+    }
+
+    @Override
+    public @NotNull HandlerList getHandlers() {
+        return HANDLER_LIST;
+    }
+
+    @NotNull
+    public static HandlerList getHandlerList() {
+        return HANDLER_LIST;
+    }
+
+    @Override
+    public boolean isCancelled() {
+        return cancelled;
+    }
+
+    @Override
+    public void setCancelled(final boolean cancel) {
+        this.cancelled = cancel;
+    }
+}
diff --git a/src/main/java/org/bukkit/RegionAccessor.java b/src/main/java/org/bukkit/RegionAccessor.java
index 44ee56a5956cc17194c767a0c1071a2abffe818a..43dd6c59cceba12f27e6b265acc3ad97eea37abd 100644
--- a/src/main/java/org/bukkit/RegionAccessor.java
+++ b/src/main/java/org/bukkit/RegionAccessor.java
@@ -493,5 +493,15 @@ public interface RegionAccessor extends Keyed { // Paper
      * @return whether a line of sight exists between {@code from} and {@code to}
      */
     public boolean lineOfSightExists(@NotNull Location from, @NotNull Location to);
+
+    /**
+     * Checks if the world collides with the given boundingbox.
+     * This will check for any colliding hard entities (boats, shulkers) / worldborder / blocks.
+     * Does not load chunks that are within the bounding box.
+     *
+     * @param boundingBox the box to check collisions in
+     * @return collides or not
+     */
+    boolean hasCollisionsIn(@NotNull org.bukkit.util.BoundingBox boundingBox);
     // Paper end
 }
diff --git a/src/main/java/org/bukkit/entity/Entity.java b/src/main/java/org/bukkit/entity/Entity.java
index a2223907c6e6780ca25dae255f321f9add11c912..11885ef53ed97738d0a50e5f459a9f76c975c085 100644
--- a/src/main/java/org/bukkit/entity/Entity.java
+++ b/src/main/java/org/bukkit/entity/Entity.java
@@ -1019,4 +1019,26 @@ public interface Entity extends Metadatable, CommandSender, Nameable, Persistent
      */
     boolean isInPowderedSnow();
     // Paper end
+
+    // Paper start - Collision API
+    /**
+     * Checks for any collisions with the entity's bounding box at the provided location.
+     * This will check for any colliding entities (boats, shulkers) / worldborder / blocks.
+     * Does not load chunks that are within the bounding box at the specified location.
+     *
+     * @param location the location to check collisions in
+     * @return collides or not
+     */
+    boolean collidesAt(@NotNull Location location);
+
+    /**
+     * This checks using the given boundingbox as the entity's boundingbox if the entity would collide with anything.
+     * This will check for any colliding entities (boats, shulkers) / worldborder / blocks.
+     * Does not load chunks that are within the bounding box.
+     *
+     * @param boundingBox the box to check collisions in
+     * @return collides or not
+     */
+    boolean wouldCollideUsing(@NotNull BoundingBox boundingBox);
+    // Paper end - Collision API
 }
